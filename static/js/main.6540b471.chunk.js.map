{"version":3,"sources":["components/Note.js","components/Notification.js","components/Footer.js","services/notes.js","App.js","index.js"],"names":["Note","note","toggleImportanceOf","label","important","class","content","onClick","Notification","message","className","Footer","style","color","fontStyle","fontSize","baseUrl","axios","get","then","response","data","newObject","post","id","put","App","props","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","errorMessage","setErrorMessage","useEffect","noteService","initialNotes","notesToShow","filter","find","n","changedNote","map","catch","err","setTimeout","key","onSubmit","event","preventDefault","noteObject","date","Date","toISOString","Math","random","concat","value","onChange","target","type","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.6540b471.chunk.js","sourcesContent":["import React from 'react'\n\nconst Note = ({ note, toggleImportanceOf }) => {\n  const label = note.important ? 'make not important' : 'make important'\n\n  return (\n    <li class=\"note\">\n      {note.content}\n      <button onClick={toggleImportanceOf}>{label}</button>\n    </li>\n    \n  )\n}\n\nexport default Note","import React from 'react'\n\nconst Notification = ({ message }) => {\n    if (message === null) {\n      return null\n    }\n  \n    return (\n      <div className=\"error\">\n        {message}\n      </div>\n    )\n  }\n\n  export default Notification","import React from 'react'\n\nconst Footer = () => {\n    const footerStyle = {\n      color: 'green',\n      fontStyle: 'italic',\n      fontSize: 16\n    }\n  \n    return (\n      <div style={footerStyle}>\n        <br />\n        <em>Note app, Department of Computer Science, University of Helsinki 2019</em>\n      </div> \n    )\n  }\n  \n\n  export default Footer","import axios from 'axios'\nconst baseUrl = 'http://localhost:3001/notes'\n\nconst getAll = () => {\n    const request = axios.get(baseUrl)\n    return request.then(response => response.data)\n}\n\nconst create = newObject => {\n    const request = axios.post(baseUrl, newObject)\n    return request.then(response => response.data)\n}\n\nconst update = (id, newObject) => {\n    const request = axios.put(`${baseUrl}/${id}`, newObject)\n    return request.then(response => response.data)\n}\n\nexport default { \n  getAll,\n  create,\n  update \n}","import React, { useState, useEffect } from 'react'\nimport Note from './components/Note'\nimport Notification from './components/Notification'\nimport Footer from './components/Footer'\nimport axios from 'axios'\nimport noteService from './services/notes'\nimport { ninvoke } from 'q'\nimport './index.css'\n\n\nconst App = (props) => {\n  const [notes, setNotes] = useState([])\n  const [newNote, setNewNote] = useState('')\n  const [showAll, setShowAll] = useState(true)\n  const [errorMessage, setErrorMessage] = useState('some error happened...')\n\n  const hook = () => {\n    noteService\n      .getAll()\n      .then(initialNotes => {\n        setNotes(initialNotes)\n      })\n  }\n  \n  useEffect(hook, [])\n\n  const notesToShow = showAll ? notes : notes.filter(note => note.important)\n\n  const handleNoteChange = (event) => {\n    setNewNote(event.target.value);\n  }\n\n  const rows = () => notesToShow.map(note => \n    <Note \n      key={note.id}\n      note={note}\n      toggleImportanceOf={() => toggleImportanceOf(note.id)}\n    />\n  )\n\n  const addNote = (event) => {\n    event.preventDefault()\n    const noteObject = {\n      content: newNote,\n      date: new Date().toISOString(),\n      important: Math.random() > 0.5\n    }\n\n    noteService\n    .create(noteObject)\n    .then(initialNotes => {\n      setNotes(notes.concat(initialNotes))\n      setNewNote('')\n    })\n  }\n\n  const toggleImportanceOf = id => {\n    //console.log('importance of ${id} needs to be toggled')\n    const url = `http://localhost:3001/notes/${id}`\n    const note = notes.find(n => n.id === id)\n    const changedNote = {...note, important: !note.important}\n    noteService\n      .update(id, changedNote)\n      .then(initialNotes => {\n        setNotes(notes.map(note => note.id !== id ? note : initialNotes))\n      }).catch(err => {\n        setErrorMessage(\n          `Note '${note.content}' was alredy removed from the server`\n        )\n        setTimeout(() => {\n          setErrorMessage(null)\n        }, 500)\n        setNotes(notes.filter(n => n.id !== id)); //remove an already deleted note from the app's state\n      })\n  }\n\n  return (\n    <div>\n      <h1>Notes</h1>\n      <Notification message={errorMessage} />\n      <div>\n        <button onClick={() => setShowAll(!showAll)}>\n          show {showAll ? 'important' : 'all'}\n        </button>\n      </div>\n      <ul>\n        {rows()}\n      </ul>\n      <form onSubmit={addNote}>\n        <input \n          value={newNote} \n          onChange={handleNoteChange}\n        />\n        <button type=\"submit\">save</button>\n      </form>  \n      <Footer />\n    </div>\n  )\n}\n  \n  export default App","import React, { useState, useEffect } from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App' \nimport axios from 'axios'\n\n\n\nconst notes = [\n  {\n    id: 1,\n    content: 'HTML is easy',\n    date: '2019-05-30T17:30:31.098Z',\n    important: true\n  },\n  {\n    id: 2,\n    content: 'Browser can execute only Javascript',\n    date: '2019-05-30T18:39:34.091Z',\n    important: false\n  },\n  {\n    id: 3,\n    content: 'GET and POST are the most important methods of HTTP protocol',\n    date: '2019-05-30T19:20:14.298Z',\n    important: true\n  }\n]\n\n\n// axios\n//   .get('http://localhost:3001/notes')\n//   .then(response => {\n//     const notes = response.data\n//     console.log(notes)\n//   })\n\n\nReactDOM.render(\n  <App notes={notes} />,\n  document.getElementById('root')\n)\n\n\n\n// const result = notes.map(note => note.id)\n// const result = notes.map(note => note.content)\n// const result = notes.map(note => {note.content} ) //Fails\n// console.log(result)"],"sourceRoot":""}